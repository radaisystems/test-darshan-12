name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

env:
  PYTHON_VERSION: 3.12
  IMAGE_NAME: test-darshan-12

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        
    - name: Install dependencies
      run: |
        cd app/python
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Lint with flake8
      run: |
        cd app/python
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        cd app/python
        pytest --cov=. --cov-report=xml --cov-report=term-missing || echo "No tests found, skipping"

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    outputs:
      image-tag: 
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Generate image metadata
      id: meta
      run: |
        if [[ "" == "workflow_dispatch" ]]; then
          TAG="manual-$(date +%Y%m%d-%H%M%S)"
        else
          TAG="main-$(echo  | cut -c1-7)"
        fi
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"
        
    - name: Build Docker image
      run: |
        docker build -t : .
        docker tag : :latest
        echo "Docker image built: :"

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Development
      run: |
        echo "üöÄ Auto-deploying test-darshan-12 to Development environment"
        echo "Image: :NaN"
        echo "Commit: "
        # Add your development deployment commands here
        # Example: kubectl set image deployment/test-darshan-12 app=:NaN -n development

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Staging
      run: |
        echo "üéØ Manual deployment: test-darshan-12 to Staging environment"
        echo "Image: :NaN"
        echo "Triggered by: "
        # Add your staging deployment commands here
        # Example: helm upgrade --install test-darshan-12 ./infrastructure/helm/ --set image.tag=NaN -n staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Production
      run: |
        echo "üî• PRODUCTION deployment: test-darshan-12"
        echo "Image: :NaN"
        echo "Triggered by: "
        echo "‚ö†Ô∏è  This is a production deployment - ensure all checks have passed"
        # Add your production deployment commands here
        # Example: helm upgrade --install test-darshan-12 ./infrastructure/helm/ --set image.tag=NaN -n production

  rollback:
    name: Rollback (Manual)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && failure()
    
    steps:
    - name: Rollback Instructions
      run: |
        echo "üîÑ Deployment failed - Rollback options:"
        echo "1. Check the logs above for the failure reason"
        echo "2. Fix the issue and re-run the workflow"
        echo "3. For immediate rollback, manually trigger deployment with previous stable tag"
        echo "4. Emergency rollback: kubectl rollout undo deployment/test-darshan-12 -n <environment>"